type: edu
custom_name: stage3
files:
- name: src/blockchain/Main.java
  visible: true
  text: |
    package blockchain;

    public class Main {
        public static void main(String[] args) {
            System.out.println("Hello World!");
        }
    }
  learner_created: false
- name: test/BlockchainTest.java
  visible: false
  text: |
    import org.hyperskill.hstest.stage.StageTest;
    import org.hyperskill.hstest.testcase.CheckResult;
    import org.hyperskill.hstest.testcase.TestCase;

    import java.util.ArrayList;
    import java.util.List;
    import java.util.stream.Collectors;


    class BlockParseException extends Exception {
        BlockParseException(String msg) {
            super(msg);
        }
    }


    class Block {

        int id;
        long timestamp;
        long magic;
        String hashprev;
        String hash;

        static Block parseBlock(String strBlock) throws BlockParseException {
            if (strBlock.length() == 0) {
                return null;
            }

            if (!(strBlock.contains("Block:")
                && strBlock.contains("Timestamp:"))) {

                return null;
            }

            Block block = new Block();

            List<String> lines = strBlock
                .lines()
                .map(String::strip)
                .filter(e -> e.length() > 0)
                .collect(Collectors.toList());

            if (lines.size() != 11) {
                throw new BlockParseException("Every block should " +
                    "contain 11 lines of data");
            }

            if (!lines.get(0).equals("Block:")) {
                throw new BlockParseException("First line of every block " +
                    "should be \"Block:\"");
            }

            if (!lines.get(1).startsWith("Created by")) {
                throw new BlockParseException("Second line of every block " +
                    "should start with \"Created by\"");
            }

            if (!lines.get(2).startsWith("Id:")) {
                throw new BlockParseException("Third line of every block " +
                    "should start with \"Id:\"");
            }

            String id = lines.get(2).split(":")[1]
                .strip().replace("-", "");
            boolean isNumeric = id.chars().allMatch(Character::isDigit);

            if (!isNumeric) {
                throw new BlockParseException("Id should be a number");
            }

            block.id = Integer.parseInt(id);



            if (!lines.get(3).startsWith("Timestamp:")) {
                throw new BlockParseException("4-th line of every block " +
                    "should start with \"Timestamp:\"");
            }

            String timestamp = lines.get(3).split(":")[1]
                .strip().replace("-", "");
            isNumeric = timestamp.chars().allMatch(Character::isDigit);

            if (!isNumeric) {
                throw new BlockParseException("Timestamp should be a number");
            }

            block.timestamp = Long.parseLong(timestamp);


            if (!lines.get(4).startsWith("Magic number:")) {
                throw new BlockParseException("5-th line of every block " +
                    "should start with \"Magic number:\"");
            }

            String magic = lines.get(4).split(":")[1]
                .strip().replace("-", "");
            isNumeric = magic.chars().allMatch(Character::isDigit);

            if (!isNumeric) {
                throw new BlockParseException("Magic number should be a number");
            }

            block.magic = Long.parseLong(magic);



            if (!lines.get(5).equals("Hash of the previous block:")) {
                throw new BlockParseException("6-th line of every block " +
                    "should be \"Hash of the previous block:\"");
            }

            if (!lines.get(7).equals("Hash of the block:")) {
                throw new BlockParseException("8-th line of every block " +
                    "should be \"Hash of the block:\"");
            }

            String prevhash = lines.get(6).strip();
            String hash = lines.get(8).strip();

            if (!(prevhash.length() == 64 || prevhash.equals("0"))
                || !(hash.length() == 64)) {

                throw new BlockParseException("Hash length should " +
                    "be equal to 64 except \"0\"");
            }

            block.hash = hash;
            block.hashprev = prevhash;

            return block;
        }


        static List<Block> parseBlocks(String output) throws BlockParseException {
            String[] strBlocks = output.split("\n\n");

            List<Block> blocks = new ArrayList<>();

            for (String strBlock : strBlocks) {
                Block block = parseBlock(strBlock.strip());
                if (block != null) {
                    blocks.add(block);
                }
            }

            return blocks;
        }
    }

    class Clue {
        String zeros;
        Clue(int n) {
            zeros = "0".repeat(n);
        }
    }


    public class BlockchainTest extends StageTest<Clue> {

        List<String> previousOutputs = new ArrayList<>();

        @Override
        public List<TestCase<Clue>> generate() {
            return List.of(
                new TestCase<>(),
                new TestCase<>()
            );
        }

        @Override
        public CheckResult check(String reply, Clue clue) {

            if (previousOutputs.contains(reply)) {
                return new CheckResult(false,
                    "You already printed this text in the previous tests");
            }

            previousOutputs.add(reply);

            List<Block> blocks;
            try {
                blocks = Block.parseBlocks(reply);
            } catch (BlockParseException ex) {
                return new CheckResult(false, ex.getMessage());
            } catch (Exception ex) {
                return CheckResult.wrong("");
            }

            if (blocks.size() != 5) {
                return new CheckResult(false,
                    "You should output 5 blocks, found " + blocks.size());
            }

            for (int i = 1; i < blocks.size(); i++) {
                Block curr = blocks.get(i - 1);
                Block next = blocks.get(i);

                if (curr.id + 1 != next.id) {
                    return new CheckResult(false,
                        "Id`s of blocks should increase by 1");
                }

                if (next.timestamp < curr.timestamp) {
                    return new CheckResult(false,
                        "Timestamp`s of blocks should increase");
                }

                if (!next.hashprev.equals(curr.hash)) {
                    return new CheckResult(false, "Two hashes aren't equal, " +
                        "but should");
                }
            }


            return CheckResult.correct();
        }
    }
  learner_created: false
- name: BlockChain.txt
  visible: true
  text: "��\0\x05sr\0\x14java.util.LinkedList\f)S]J`�\"\x03\0\0xpw\x04\0\0\0\x05sr\0\
    \x15blockchain.BlockChain\0\0\0\0\0\0\0\x01\x02\0\x06I\0\x13timeToGenerateBlockL\0\
    \vhashOfBlockt\0\x12Ljava/lang/String;L\0\x13hashOfPreviousBlockq\0~\0\x03L\0\x02\
    idt\0\x10Ljava/lang/Long;L\0\vmagicNumberq\0~\0\x04L\0\ttimestampq\0~\0\x04xp\0\
    \0\0\0t\0@006a021aee6de2d48ecd190ccf7e6ae763fd36b2a48b564c70f4e09a537b082dt\0\x01\
    0sr\0\x0ejava.lang.Long;��̏#�\x02\0\x01J\0\x05valuexr\0\x10java.lang.Number���\
    \x1d\v���\x02\0\0xp\0\0\0\0\0\0\0\x01sq\0~\0\b\0\0\0\0\0\0\x1d�sq\0~\0\b\0\0\x01\
    ��d�Jsq\0~\0\x02\0\0\0\0t\0@005c04d9c80800061bbcf680242d38910d757ac05ff6e0b7db6c2c22696a68bdq\0\
    ~\0\x06sq\0~\0\b\0\0\0\0\0\0\0\x02sq\0~\0\b\0\0\0\0\0\0\x15)sq\0~\0\b\0\0\x01�\
    �d�Lsq\0~\0\x02\0\0\0\0t\0@002a061dd580edb6edcfcf3c79da0205716f0b0c81ab78b30353ecef0e54cc49q\0\
    ~\0\x0esq\0~\0\b\0\0\0\0\0\0\0\x03sq\0~\0\b\0\0\0\0\0\0\t�sq\0~\0\b\0\0\x01��\
    d�`sq\0~\0\x02\0\0\0\0t\0@00685e250a7e05321ab0ce73eada31e9da6df039a472da1db28ebc7bad4892ceq\0\
    ~\0\x13sq\0~\0\b\0\0\0\0\0\0\0\x04sq\0~\0\b\0\0\0\0\0\0\x18�sq\0~\0\b\0\0\x01�\
    �d�csq\0~\0\x02\0\0\0\0t\0@004d3751e72900385cb60ec39c749e52d00a1586902adc78af501c7a60db02d3q\0\
    ~\0\x18sq\0~\0\b\0\0\0\0\0\0\0\x05sq\0~\0\b\0\0\0\0\0\0\n>sq\0~\0\b\0\0\x01��\
    d�kx"
  learner_created: true
feedback_link: https://hyperskill.org/learn/step/5415#comment
status: Solved
feedback:
  message: Congratulations!
  time: Thu, 08 Sep 2022 16:18:00 UTC
record: 3
